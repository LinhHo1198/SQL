# For this project, I downloaded Spotify data from Kaggle.
# Then I created a table to insert Spotify data into.
# Finally, I performed analytics on the data using Complex SQL. 

#Creating the table: 
CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness text NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL 
)

#Then I inserted the Spotify Data .csv into the table.

#Next, I came up with questions and used the following SQL to delve into a comprehensive analysis of the dataset, aiming to uncover valuable insights and patterns hidden within.

#1. What are the top 5 artists with the highest average popularity for their tracks, considering only artists with at least 5 tracks in the database?
SELECT artist_name, AVG(popularity) AS avg_popularity
FROM BIT_DB.Spotifydata
GROUP BY artist_name
HAVING COUNT(track_name) >= 5
ORDER BY avg_popularity DESC
LIMIT 5

#2. For each artist, find the track with the highest danceability and its corresponding danceability value.
SELECT artist_name, track_name, danceability as max_danceability
FROM BIT_DB.Spotifydata AS s
WHERE danceability = (
    SELECT MAX(danceability)
    FROM BIT_DB.Spotifydata
    WHERE artist_name = s.artist_name
    GROUP BY artist_name)

#3. Top 10 tracks with the highest combined score of popularity and valence.
SELECT track_name, (popularity + valence) AS combined_score
FROM BIT_DB.Spotifydata
ORDER BY combined_score DESC
LIMIT 10

#4. Identify the tracks with above-average danceability, popularity, and energy:
SELECT artist_name, track_name, danceability, popularity, energy
FROM BIT_DB.Spotifydata
WHERE danceability > (SELECT AVG(danceability) FROM BIT_DB.Spotifydata)
  AND popularity > (SELECT AVG(popularity) FROM BIT_DB.Spotifydata)
  AND energy > (SELECT AVG(energy) FROM BIT_DB.Spotifydata)

#5. Average loudness of tracks in each key, and display the key along with its corresponding average loudness, ordered by the average loudness in descending order.
SELECT song_key, AVG(loudness) AS avg_loudness
FROM BIT_DB.Spotifydata
GROUP BY song_key
ORDER BY avg_loudness DESC

#6. Tracks that have a higher than average tempo but a lower than average loudness. 
SELECT artist_name, track_name, tempo, loudness
FROM BIT_DB.Spotifydata
WHERE tempo > (SELECT AVG(tempo) FROM BIT_DB.Spotifydata)
  AND loudness < (SELECT AVG(loudness) FROM BIT_DB.Spotifydata)

#7. What is the average danceability, popularity, and energy by artist and track?
SELECT artist_name, track_name, AVG(danceability), AVG(energy), AVG(popularity)
FROM BIT_DB.Spotifydata
GROUP BY artist_name, track_name 

#8. What is the average danceability, popularity, and energy of all tracks?
SELECT AVG(danceability), AVG(energy), AVG(popularity)
FROM BIT_DB.Spotifydata

#9. What are the top 10 tracks with the highest popularity, including the artist name?
SELECT artist_name, track_name, popularity
FROM BIT_DB.Spotifydata
ORDER BY popularity desc
LIMIT 10

#10. Which artist has the most tracks in the database?
SELECT artist_name, COUNT(track_name) AS num_tracks
FROM BIT_DB.Spotifydata
GROUP BY artist_name
ORDER BY num_tracks desc
LIMIT 1

#11. Who are the top 10 artists based on popularity?
SELECT artist_name, AVG(popularity) AS avg_popularity
FROM BIT_DB.Spotifydata
GROUP BY artist_name
ORDER BY avg_popularity DESC
LIMIT 10

#12. What artist released the longest song? 
SELECT artist_name, track_name, duration_ms
FROM BIT_DB.Spotifydata
ORDER BY duration_ms DESC
LIMIT 1

#13. What is the average tempo of all tracks?
SELECT AVG(tempo)
FROM BIT_DB.Spotifydata

#14. How many tracks have a loudness greater than -5 dB?
SELECT COUNT(*) AS num_tracks
FROM BIT_DB.Spotifydata
WHERE loudness > -5

#15. How many tracks have a duration greater than 5 minutes?
SELECT COUNT(*) AS num_tracks
FROM BIT_DB.Spotifydata
WHERE duration_ms > (5*60*1000)
#OR
SELECT COUNT(*) AS num_tracks
FROM BIT_DB.Spotifydata
WHERE duration_ms > 300000

#16. What is the average danceability for the 10 most popular songs? 
SELECT AVG(danceability) AS avg_danceability
FROM BIT_DB.Spotifydata
WHERE track_id IN (
    SELECT track_id
    FROM BIT_DB.Spotifydata
    ORDER BY popularity DESC
    LIMIT 10)

#17. What is the most common time signature among the tracks?
SELECT time_signature, COUNT(*) AS num_tracks
FROM BIT_DB.Spotifydata
GROUP BY time_signature
ORDER BY num_tracks DESC
LIMIT 1

#18. Which artist has the highest average popularity for their tracks?
SELECT artist_name, AVG(popularity)
FROM BIT_DB.Spotifydata
GROUP BY artist_name
ORDER BY AVG(popularity) DESC
LIMIT 1

#19. Which track has the highest speechiness value?
SELECT track_name, speechiness
FROM BIT_DB.Spotifydata
ORDER BY speechiness DESC
LIMIT 1

#20. Which track has the highest instrumentalness value?
SELECT track_name, instrumentalness
FROM BIT_DB.Spotifydata
ORDER BY instrumentalness DESC
LIMIT 1

#21. What is the distribution of acousticness values among the tracks?
SELECT acousticness, COUNT(*) AS num_tracks
FROM BIT_DB.Spotifydata
GROUP BY acousticness
ORDER BY acousticness

#22. How many tracks have a valence greater than 0.7?
SELECT COUNT(*) AS num_tracks
FROM BIT_DB.Spotifydata
WHERE valence > 0.7

#23. Calculate the average popularity for the artists in the Spotify data table. Then, for every artist with an average popularity of 90 or above, show their name, their average popularity, and label them as a “Top Star”.
WITH popularity_average_CTE AS (
SELECT s.artist_name,
AVG(s.popularity) AS average_popularity
FROM SpotifyData s 
GROUP BY s.artist_name
)
 
SELECT  artist_name,
        average_popularity,
        'Top Star' AS tag
FROM popularity_average_CTE
WHERE average_popularity>=90







 
























